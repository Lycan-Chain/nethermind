// SPDX-FileCopyrightText: 2022 Demerzel Solutions Limited
// SPDX-License-Identifier: LGPL-3.0-only

using System.Collections;
using System.IO;
using Nethermind.Core.Extensions;
using Nethermind.Serialization.Json;
using Nethermind.Serialization.Rlp;
using Nethermind.Specs.ChainSpecStyle;
using NUnit.Framework;

namespace Nethermind.Optimism.Test;

public class ReceiptDecoderTests
{
    [TestCaseSource(nameof(DepositTxReceiptsSerializationTestCases))]
    public void Test_tx_network_form_receipts_properly_encoded_for_trie(byte[] rlp, bool includesNonce, bool includesVersion, bool shouldIncludeNonceAndVersionForTxTrie)
    {
        static OptimismTxReceipt TestNetworkEncodingRoundTrip(byte[] rlp, bool includesNonce, bool includesVersion)
        {
            OptimismReceiptMessageDecoder decoder = new();
            OptimismTxReceipt decodedReceipt = decoder.Decode(new RlpStream(rlp), RlpBehaviors.SkipTypedWrapping);

            RlpStream encodedRlp = new(decoder.GetLength(decodedReceipt, RlpBehaviors.SkipTypedWrapping));
            decoder.Encode(encodedRlp, decodedReceipt, RlpBehaviors.SkipTypedWrapping);

            Assert.Multiple(() =>
            {
                Assert.That(decodedReceipt.DepositNonce, includesNonce ? Is.Not.Null : Is.Null);
                Assert.That(decodedReceipt.DepositReceiptVersion, includesVersion ? Is.Not.Null : Is.Null);
                Assert.That(rlp, Is.EqualTo(encodedRlp.Data.ToArray()));
            });

            return decodedReceipt;
        }

        static OptimismTxReceipt TestStorageEncodingRoundTrip(OptimismTxReceipt decodedReceipt, bool includesNonce, bool includesVersion)
        {
            OptimismCompactReceiptStorageDecoder decoder = new();

            RlpStream encodedRlp = new(decoder.GetLength(decodedReceipt, RlpBehaviors.SkipTypedWrapping));
            decoder.Encode(encodedRlp, decodedReceipt, RlpBehaviors.SkipTypedWrapping);
            encodedRlp.Position = 0;

            OptimismTxReceipt decodedStorageReceipt = decoder.Decode(encodedRlp, RlpBehaviors.SkipTypedWrapping);

            Assert.Multiple(() =>
            {
                Assert.That(decodedStorageReceipt.DepositNonce, includesNonce ? Is.Not.Null : Is.Null);
                Assert.That(decodedStorageReceipt.DepositReceiptVersion, includesVersion ? Is.Not.Null : Is.Null);
            });

            Rlp.ValueDecoderContext valueDecoderCtx = new(encodedRlp.Data);
            decodedStorageReceipt = decoder.Decode(ref valueDecoderCtx, RlpBehaviors.SkipTypedWrapping);

            Assert.Multiple(() =>
            {
                Assert.That(decodedStorageReceipt.DepositNonce, includesNonce ? Is.Not.Null : Is.Null);
                Assert.That(decodedStorageReceipt.DepositReceiptVersion, includesVersion ? Is.Not.Null : Is.Null);
            });

            return decodedReceipt;
        }

        static void TestTrieEncoding(OptimismTxReceipt decodedReceipt, bool shouldIncludeNonceAndVersionForTxTrie)
        {
            OptimismReceiptTrieDecoder trieDecoder = new();
            RlpStream encodedTrieRlp = new(trieDecoder.GetLength(decodedReceipt, RlpBehaviors.SkipTypedWrapping));

            trieDecoder.Encode(encodedTrieRlp, decodedReceipt, RlpBehaviors.SkipTypedWrapping);
            encodedTrieRlp.Position = 0;

            OptimismTxReceipt decodedTrieReceipt = trieDecoder.Decode(encodedTrieRlp, RlpBehaviors.SkipTypedWrapping);

            Assert.Multiple(() =>
            {
                Assert.That(decodedTrieReceipt.DepositNonce, shouldIncludeNonceAndVersionForTxTrie ? Is.Not.Null : Is.Null);
                Assert.That(decodedTrieReceipt.DepositReceiptVersion, shouldIncludeNonceAndVersionForTxTrie ? Is.Not.Null : Is.Null);
            });
        }

        OptimismTxReceipt decodedReceipt = TestNetworkEncodingRoundTrip(rlp, includesNonce, includesVersion);
        TestStorageEncodingRoundTrip(decodedReceipt, includesNonce, includesVersion);
        TestTrieEncoding(decodedReceipt, shouldIncludeNonceAndVersionForTxTrie);
    }


    public static IEnumerable DepositTxReceiptsSerializationTestCases
    {
        get
        {
            yield return new TestCaseData(
                Bytes.FromHexString("7ef901090182f9f5bc080"),
                true,
                false,
                false
                )
            {
                TestName = "1st OP Sepolia block receipt"
            };

            yield return new TestCaseData(
                Bytes.FromHexString("0x7ef9010c0182b729bc0830154f4"),
                true,
                false,
                false
                )
            {
                TestName = "Regolith receipt"
            };

            yield return new TestCaseData(
               Bytes.FromHexString("0x7ef903660183023676bf9025af9011d944200000000000000000000000000000000000010f884a0b0444523268717a02698be47d0803aa7468c00acbed2f8bd93a0459cde61dd89a00000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000deaddeaddeaddeaddeaddeaddeaddeaddead0000a000000000000000000000000072fb15f502af58765015972a85f2c58551ef3fa1b88000000000000000000000000072fb15f502af58765015972a85f2c58551ef3fa1000000000000000000000000000000000000000000000000016345785d8a000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000f8dc944200000000000000000000000000000000000010f863a031b2166ff604fc5672ea5df08a78081d2bc6d746cadce880747f3643d819e83da000000000000000000000000072fb15f502af58765015972a85f2c58551ef3fa1a000000000000000000000000072fb15f502af58765015972a85f2c58551ef3fa1b860000000000000000000000000000000000000000000000000016345785d8a000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000f85a944200000000000000000000000000000000000007f842a04641df4a962071e12719d8c8c8e5ac7fc4d97b927346a3d7a335b1f7517e133ca0c056e47e441542720e5a953ab9fcf1cc3de86fb1d3078293fb9708e6e77816938080"),
               true,
               false,
               false
               )
            {
                TestName = "Regolith receipt 2"
            };

            yield return new TestCaseData(
                Bytes.FromHexString("0xf901090183011711bc0"),
                false,
                false,
                false
                )
            {
                TestName = "Regolith receipt of a regular tx"
            };

            yield return new TestCaseData(
                Bytes.FromHexString("7ef9010d0182ab7bbc083b2557501"),
                true,
                true,
                true
                )
            {
                TestName = "Canyon receipt"
            };
        }
    }

    [Test]
    public void FjordTest()
    {
        var fname = @"N:\logs\8\block_0xa0db04be728f8c666f47e47bca5090a5c7b3dd3735a2911187981a992f7fd0a6.rlp";
        var rlp = File.ReadAllBytes(fname);
        var block = new BlockDecoder().Decode(rlp);

        var a = @"{
        ""regolithTimestamp"": ""0x0"",
        ""bedrockBlockNumber"": ""0x0"",
        ""canyonTimestamp"": ""0x6553a790"",
        ""ecotoneTimestamp"": ""0x65D62C10"",
        ""fjordTimestamp"": ""0x66575100"",
        ""l1FeeRecipient"": ""0x420000000000000000000000000000000000001A"",
        ""l1BlockAddress"": ""0x4200000000000000000000000000000000000015"",
        ""canyonBaseFeeChangeDenominator"": ""250"",
        ""create2DeployerAddress"": ""0x13b0D85CcB8bf860b6b79AF3029fCA081AE9beF2"",
        ""create2DeployerCode"": ""6080604052600436106100435760003560e01c8063076c37b21461004f578063481286e61461007157806356299481146100ba57806366cfa057146100da57600080fd5b3661004a57005b600080fd5b34801561005b57600080fd5b5061006f61006a366004610327565b6100fa565b005b34801561007d57600080fd5b5061009161008c366004610327565b61014a565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b3480156100c657600080fd5b506100916100d5366004610349565b61015d565b3480156100e657600080fd5b5061006f6100f53660046103ca565b610172565b61014582826040518060200161010f9061031a565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820381018352601f90910116604052610183565b505050565b600061015683836102e7565b9392505050565b600061016a8484846102f0565b949350505050565b61017d838383610183565b50505050565b6000834710156101f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e636500000060448201526064015b60405180910390fd5b815160000361025f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f60448201526064016101eb565b8282516020840186f5905073ffffffffffffffffffffffffffffffffffffffff8116610156576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f790000000000000060448201526064016101eb565b60006101568383305b6000604051836040820152846020820152828152600b8101905060ff815360559020949350505050565b61014e806104ad83390190565b6000806040838503121561033a57600080fd5b50508035926020909101359150565b60008060006060848603121561035e57600080fd5b8335925060208401359150604084013573ffffffffffffffffffffffffffffffffffffffff8116811461039057600080fd5b809150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806000606084860312156103df57600080fd5b8335925060208401359150604084013567ffffffffffffffff8082111561040557600080fd5b818601915086601f83011261041957600080fd5b81358181111561042b5761042b61039b565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156104715761047161039b565b8160405282815289602084870101111561048a57600080fd5b826020860160208301376000602084830101528095505050505050925092509256fe608060405234801561001057600080fd5b5061012e806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063249cb3fa14602d575b600080fd5b603c603836600460b1565b604e565b60405190815260200160405180910390f35b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915281205460ff16608857600060aa565b7fa2ef4600d742022d532d4747cb3547474667d6f13804902513b2ec01c848f4b45b9392505050565b6000806040838503121560c357600080fd5b82359150602083013573ffffffffffffffffffffffffffffffffffffffff8116811460ed57600080fd5b80915050925092905056fea26469706673582212205ffd4e6cede7d06a5daf93d48d0541fc68189eeb16608c1999a82063b666eb1164736f6c63430008130033a2646970667358221220fdc4a0fe96e3b21c108ca155438d37c9143fb01278a3c1d274948bad89c564ba64736f6c63430008130033""
      }";


        EthereumJsonSerializer serializer = new EthereumJsonSerializer();
        ;

        var specHelper = new OptimismSpecHelper(serializer.Deserialize<OptimismParameters>(a));

        var info = new L1BlockGasInfo(block, specHelper);

        var gas1 = info.GetTxGasInfo(block.Transactions[1]);

    }
}
